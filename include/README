To display custom images on your OLED display, you need to convert the image into a format that the Arduino can understand. Specifically, you need to convert it into a **byte array**. Here's a step-by-step guide on how to convert your image and display it on your OLED screen using tools like **LCD Assistant** or online converters.

---

## Converting Images to Byte Arrays

### Step 1: Prepare Your Image

- **Format**: The image should be in **black and white** (monochrome) since most OLED displays are monochrome. If it's a color image, you need to convert it to grayscale or black and white first.
- **Size**: The image should fit within the resolution of the display. For example, a **128x64 pixel** display needs an image of that size or smaller.

### Step 2: Resize the Image (if necessary)

- You can use an image editing software (like **GIMP**, **Photoshop**, or **Paint**) to resize your image to the dimensions of your OLED screen (e.g., 128x64 pixels).
- Make sure the image is **black and white** (1-bit per pixel) to minimize file size and match the OLED capabilities.

### Step 3: Convert the Image to Byte Array

You can use **LCD Assistant** or an online tool to convert your image to a byte array. Here's how:

---

### **Option 1: Using LCD Assistant (Windows)**

1. **Download LCD Assistant**:
   - You can download it from [here](http://en.radzio.dxp.pl/bitmap_converter/).
   
2. **Convert the Image**:
   - Open **LCD Assistant** and click on `File` > `Open`.
   - Choose your image file and set the output size to match your display (e.g., **128x64**).
   - Choose **Monochrome** and set the **Horizontal** option to `128` pixels (or whatever the width of your display is).
   - Click **OK**.

3. **Save the Byte Array**:
   - After conversion, click `File` > `Save As`, and save the byte array as a `.h` header file (e.g., `myImage.h`).

4. **Include the Image in Your Code**:
   - In your Arduino code, include the `.h` file and use the `drawBitmap()` function to display the image on the screen.

   ```cpp
   #include "myImage.h"  // Include the image byte array

   void setup() {
     display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
     display.clearDisplay();
     
     // Display the custom image
     display.drawBitmap(0, 0, myImage, 128, 64, WHITE);
     display.display();
   }
   ```

---

### **Option 2: Using an Online Converter**

If you don't want to use LCD Assistant, you can use an online tool to convert your image into a byte array.

1. **Go to an Online Converter**:
   - One popular option is [Image2Cpp](https://javl.github.io/image2cpp/), which converts images to C++ code that can be used in Arduino.

2. **Upload the Image**:
   - Upload your image to the converter. Make sure the image is monochrome (black and white) before uploading.
   - Set the width and height to match your OLED's resolution (e.g., 128x64).

3. **Convert and Copy the Byte Array**:
   - After uploading and selecting the correct options, click **Convert**.
   - The website will generate the C++ code that defines the image as a byte array.
   - Copy the generated code.

4. **Include the Byte Array in Your Arduino Code**:
   - Paste the generated code into your Arduino sketch, usually at the beginning of the file.
   - Use the `drawBitmap()` function to display it on the screen.

   Example of using the generated code:

   ```cpp
   #include <Adafruit_GFX.h>
   #include <Adafruit_SSD1306.h>

   // Include the image byte array
   extern const uint8_t myImage[];

   void setup() {
     display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
     display.clearDisplay();
     
     // Display the custom image
     display.drawBitmap(0, 0, myImage, 128, 64, WHITE);
     display.display();
   }
   ```

---

## Example of Using a Custom Image

### Full Example Code:

```cpp
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// Include your custom image (generated byte array)
#include "myImage.h"

// OLED display settings
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

void setup() {
  // Start the display
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  
  // Clear the display buffer
  display.clearDisplay();
  
  // Draw the custom image
  display.drawBitmap(0, 0, myImage, 128, 64, WHITE);
  
  // Display it
  display.display();
}

void loop() {
  // No actions needed in loop
}
```

---

## Troubleshooting

- **Image Doesn't Fit**: Ensure the image resolution matches your OLED display (e.g., 128x64 pixels). If it's larger or smaller, resize it.
- **Image is Blurry**: Make sure the image is in black and white format (monochrome) and not grayscale.
- **Wrong Colors**: If the image is showing the wrong colors, check the display's `drawBitmap` parameters. The `WHITE` color can be swapped for `BLACK` depending on your needs.

---

By following these steps, you should be able to easily display custom images on your 0.96-inch OLED display. Just convert the image to a byte array and use it in your Arduino sketch!